import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router'; // Importa Router si necesitas navegación
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome'; // Importa FontAwesomeModule si usas iconos
import { RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-takeoff-list',
  standalone: true,
  imports: [
    CommonModule,
    RouterModule,
    FontAwesomeModule,
    FormsModule
  ],
  templateUrl: './takeoff-list.component.html',
  styleUrl: './takeoff-list.component.scss'
})
export class TakeoffListComponent {  
  columnOrder: string[] = ['id', 'nombre', 'descripcion', 'fecha', 'estado', 'monto', 'actions'];
  defaultColumnOrder: string[] = [...this.columnOrder];
  
  // Tipos de columnas para los filtros
  columnTypes: { [key: string]: 'text' | 'date' | 'number' } = {
    id: 'text',
    nombre: 'text',
    descripcion: 'text',
    fecha: 'date',
    estado: 'text',
    monto: 'number',
    actions: 'text'
  };

  // Valores únicos para los dropdowns
  uniqueValues: { [key: string]: string[] } = {};

  // Etiquetas de columnas
  columnLabels: { [key: string]: string } = {
    id: 'ID',
    nombre: 'Nombre',
    descripcion: 'Descripción',
    fecha: 'Fecha',
    estado: 'Estado',
    monto: 'Monto',
    actions: 'Acciones'
  };

  // Estructura de filtros
  filters: {
    [key: string]: {
      type: 'text' | 'date' | 'number';
      value?: string;
      from?: string | number | null;
      to?: string | number | null;
    };
  } = {};

  draggedColumn: string | null = null;
  
  sortColumn: string | null = null;
  sortDirection: 'asc' | 'desc' = 'asc';
  
  currentPage = 1;
  itemsPerPage = 10;
  totalItems = 0; // Inicializar con 0 o cargar desde un servicio

  // Define interface for cubicacion objects
  cubicaciones: Array<{
    id: string;
    nombre: string;
    descripcion: string;
    fecha: string;
    estado: string;
    monto: string;
    [key: string]: string; // Add index signature to allow dynamic property access
  }> = [
    {
      id: 'CUB-2023-001',
      nombre: 'Torre Central',
      descripcion: 'Cubicación estructura principal',
      fecha: '15/05/2023',
      estado: 'activo',
      monto: '$48.370.000'
    },
    {
      id: 'CUB-2023-002',
      nombre: 'Edificio Norte',
      descripcion: 'Cubicación terminaciones',
      fecha: '22/05/2023',
      estado: 'activo',
      monto: '$73.290.500'
    },
    {
      id: 'CUB-2023-003',
      nombre: 'Bodega Industrial',
      descripcion: 'Cubicación prefabricados',
      fecha: '30/05/2023',
      estado: 'inactivo',
      monto: '$88.560.750'
    }
    // ... más datos si es necesario
  ];
  originalCubicaciones = [...this.cubicaciones]; // Guardar copia original para el filtrado
  showFilterMenu = false;
  showColumnMenu = false;
  hasActiveFilters = false;

  getColumnLabel(colId: string): string {
    return this.columnLabels[colId] || colId;
  }

  private initializeFilters() {
    for (const column of this.columnOrder) {
      if (column !== 'actions') {
        this.filters[column] = {
          type: this.columnTypes[column],
          value: '',
        };
        if (this.columnTypes[column] === 'date' || this.columnTypes[column] === 'number') {
          this.filters[column].from = null;
          this.filters[column].to = null;
        }
      }
    }
  }

  private updateUniqueValues() {
    this.columnOrder.forEach(column => {
      if (this.columnTypes[column] === 'text' && column !== 'actions') {
        const values = new Set(this.cubicaciones.map(item => item[column]));
        this.uniqueValues[column] = Array.from(values).sort();
      }
    });
  }
  
  constructor() {
    this.totalItems = this.cubicaciones.length;
    this.initializeFilters();
    this.updateUniqueValues();
  }

  resetFilters() {
    this.initializeFilters();
    this.hasActiveFilters = false;
    this.cubicaciones = [...this.originalCubicaciones];
    this.showFilterMenu = false;
  }

  applyFilters() {
    this.cubicaciones = this.originalCubicaciones.filter(item => {
      return Object.entries(this.filters).every(([column, filter]) => {
        if (column === 'actions') return true;
        
        if (filter.type === 'text' && filter.value) {
          return item[column].toLowerCase().includes(filter.value.toLowerCase());
        }
        
        if (filter.type === 'date') {
          const itemDate = new Date(item[column].split('/').reverse().join('-'));
          const fromDate = filter.from ? new Date(filter.from as string) : null;
          const toDate = filter.to ? new Date(filter.to as string) : null;
          
          if (fromDate && toDate) {
            return itemDate >= fromDate && itemDate <= toDate;
          } else if (fromDate) {
            return itemDate >= fromDate;
          } else if (toDate) {
            return itemDate <= toDate;
          }
        }
        
        if (filter.type === 'number') {
          const value = parseFloat(item[column].replace(/[^0-9.-]+/g, ''));
          const fromValue = filter.from ? parseFloat(filter.from as string) : null;
          const toValue = filter.to ? parseFloat(filter.to as string) : null;
          
          if (fromValue !== null && toValue !== null) {
            return value >= fromValue && value <= toValue;
          } else if (fromValue !== null) {
            return value >= fromValue;
          } else if (toValue !== null) {
            return value <= toValue;
          }
        }
        
        return true;
      });
    });

    this.hasActiveFilters = Object.values(this.filters).some(filter => 
      filter.value || filter.from || filter.to
    );
    
    this.showFilterMenu = false;
  }

  // Métodos para manejar acciones
  nuevaCubicacion() {
    console.log('Creando nueva cubicación desde TakeoffListComponent');
    // Lógica para añadir una nueva cubicación
  }

  editar(id: string) {
    console.log(`Editando cubicación ${id} desde TakeoffListComponent`);
    // Lógica para editar
  }

  eliminar(id: string) {
    console.log(`Eliminando cubicación ${id} desde TakeoffListComponent`);
    // Lógica para eliminar
  }

  sortTable(column: string): void {
    if (this.sortColumn === column) {
      this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
    } else {
      this.sortColumn = column;
      this.sortDirection = 'asc';
    }
    
    // Separar elementos fijados y no fijados
    const pinnedItems = this.cubicaciones
      .filter(item => this.pinnedItems.has(item.id));
    const unpinnedItems = this.cubicaciones
      .filter(item => !this.pinnedItems.has(item.id));
    
    // Función de ordenamiento común
    const sortFn = (a: any, b: any) => {
      const valA = column === 'monto' ? 
        parseFloat(a[column].replace(/[^0-9.-]+/g, '')) : 
        a[column];
      const valB = column === 'monto' ? 
        parseFloat(b[column].replace(/[^0-9.-]+/g, '')) : 
        b[column];

      let comparison = 0;
      if (valA > valB) {
        comparison = 1;
      } else if (valA < valB) {
        comparison = -1;
      }
      return this.sortDirection === 'asc' ? comparison : comparison * -1;
    };

    // Ordenar ambos grupos por separado
    pinnedItems.sort(sortFn);
    unpinnedItems.sort(sortFn);
    
    // Combinar manteniendo los elementos fijados arriba
    this.cubicaciones = [...pinnedItems, ...unpinnedItems];
  }

  getMaxDisplayed(): number {
    return Math.min(this.currentPage * this.itemsPerPage, this.totalItems);
  }

  changePage(page: number) {
    if (page >= 1 && page <= this.getTotalPages()) {
      this.currentPage = page;
    }
  }

  getTotalPages(): number {
    return Math.ceil(this.totalItems / this.itemsPerPage);
  }

  onPageSizeChange(event: Event): void {
    const target = event.target as HTMLSelectElement;
    if (target) {
      this.itemsPerPage = parseInt(target.value, 10);
      this.currentPage = 1; // Reset to first page
    }
  }

  getPageNumbers(): number[] {
    const totalPages = this.getTotalPages();
    const pages: number[] = [];
    const maxVisiblePages = 5;
    let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    return pages;
  }
  onDragStart(event: DragEvent, columnId: string) {
    if (columnId === 'id') return;
    this.draggedColumn = columnId;
    if (event.dataTransfer) {
      event.dataTransfer.setData('text/plain', columnId);
    }
  }

  onDragOver(event: DragEvent, columnId: string) {
    if (columnId === 'id' || !this.draggedColumn) return;
    event.preventDefault();
    const th = (event.target as HTMLElement).closest('th');
    if (th) {
      th.classList.add('drag-over');
    }
  }

  onDragLeave(event: DragEvent) {
    const th = (event.target as HTMLElement).closest('th');
    if (th) {
      th.classList.remove('drag-over');
    }
  }

  onDrop(event: DragEvent, targetColumnId: string) {
    event.preventDefault();
    if (targetColumnId === 'id' || !this.draggedColumn) return;

    const th = (event.target as HTMLElement).closest('th');
    if (th) {
      th.classList.remove('drag-over');
    }

    const fromIndex = this.columnOrder.indexOf(this.draggedColumn);
    const toIndex = this.columnOrder.indexOf(targetColumnId);

    if (fromIndex !== -1 && toIndex !== -1) {
      this.columnOrder = Array.from(this.columnOrder);
      this.columnOrder.splice(fromIndex, 1);
      this.columnOrder.splice(toIndex, 0, this.draggedColumn);
    }

    this.draggedColumn = null;
  }

  onDragEnd() {
    this.draggedColumn = null;
    document.querySelectorAll('th.drag-over').forEach(th => {
      th.classList.remove('drag-over');
    });
  }

  toggleFilterMenu() {
    this.showFilterMenu = !this.showFilterMenu;
  }

  toggleColumnMenu() {
    this.showColumnMenu = !this.showColumnMenu;
  }

  isPinned(id: string): boolean {
    return this.pinnedItems.has(id);
  }

  togglePin(id: string) {
    if (this.pinnedItems.has(id)) {
      this.pinnedItems.delete(id);
    } else {
      this.pinnedItems.add(id);
    }
    this.applyFilters(); // Reaplicar filtros considerando los elementos fijados
  }

  isColumnVisible(columnId: string): boolean {
    return this.columnOrder.includes(columnId);
  }

  toggleColumn(columnId: string) {
    if (columnId === 'id') return; // No permitir ocultar la columna ID

    const index = this.columnOrder.indexOf(columnId);
    if (index === -1) {
      // Si la columna no está visible, la añadimos al final
      this.columnOrder.push(columnId);
    } else {
      // Si la columna está visible, la removemos
      this.columnOrder.splice(index, 1);
    }
  }

  resetColumns() {
    this.columnOrder = [...this.defaultColumnOrder];
  }
}
